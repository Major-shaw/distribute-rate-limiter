# HAProxy configuration for rate limiter load balancing
# Demonstrates distributed rate limiting across multiple instances

global
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 1m
    timeout server 1m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-node

# Frontend for rate limiter API
frontend rate_limiter_frontend
    bind *:80
    
    # Capture client IP for rate limiting
    option forwardfor
    
    # Health check bypass
    acl is_health_check path_beg /health
    acl is_root path /
    acl is_docs path_beg /docs
    acl is_redoc path_beg /redoc
    acl is_openapi path /openapi.json
    
    # Send health checks directly to any backend
    use_backend rate_limiter_backend if is_health_check
    use_backend rate_limiter_backend if is_root
    use_backend rate_limiter_backend if is_docs
    use_backend rate_limiter_backend if is_redoc
    use_backend rate_limiter_backend if is_openapi
    
    # Default backend for all other requests
    default_backend rate_limiter_backend

# Backend servers
backend rate_limiter_backend
    balance roundrobin
    
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Enable session persistence based on API key for better rate limiting accuracy
    # This ensures the same API key tends to hit the same server
    hash-type consistent
    balance uri
    hash-balance-factor 150
    
    # Rate limiter instances
    server app1 rate_limiter:8000 check inter 10s fall 3 rise 2 weight 100
    server app2 rate_limiter_2:8000 check inter 10s fall 3 rise 2 weight 100
    
    # Headers to preserve client information
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    
    # Add server identifier for debugging
    http-response set-header X-Server-ID %s
